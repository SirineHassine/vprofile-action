name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-2
  # Elastic container Registry : service de registre Docker entiérement géré par AWS
  # utilisé pour stocker les images de conteneurs docker
  ECR_REPOSITORY: vprofileapp
  # EKS cluster name : Elastic Kubernetes Service: executer les clusters Kubernetes. 
  # EKS permet de gérrer et orchestrer les conteneurs
  EKS_CLUSTER: vprofile-eks

jobs: 
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: maven test
        run: mvn test

      - name: chekstyle
        run: mvn checkstyle:checkstyle

      - name: Set Java 11
        uses: actions/setup-java@v3
        with: 
          distribution: 'temurin'
          java-version: '11'

      # Setup soner scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      # Run Sonar scanner
      - name: SonarQube scan
        run:  sonar-scanner -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.sources=src/ -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ -Dsonar.junit.reportsPath=target/surefire-reports/ -Dsonar.jacoco.reportsPath=target/jacoco.exec -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
        # Check the quality Gate status
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
          SONAR_HOST_URL: ${{secrets.SONAR_URL}}

  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
        - name: Code checkout
          uses: actions/checkout@v4

        - name: Build & upload image to ECR
          uses: appleboy/docker-ecr-action@master
          with:
            access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
            secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            registry: ${{ secrets.REGISTRY }}
            repo: ${{ env.ECR_REPOSITORY }}
            region: ${{ env.AWS_REGION}}
            tags: latest,build-${{ github.run_number }}
            daemon_off: false
            dockerfile: ./Dockerfile
            context: ./

  DeployToEKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION}}

      - name: Get kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION}} --name ${{ env.EKS_CLUSTER}}
        
      #- name: Print config file
      #  run: cat ~/.kube/config

      - name: Login to ECR
        #run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY}} --docker-username=AWS --docker-password=$(aws ecr get-login-password)
        run: |
            if ! kubectl get secret regcred; then
              kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY}} --docker-username=AWS --docker-password=$(aws ecr get-login-password)
            else
              echo "Secret regcred already exists, skipping creation."
            fi
        # Helm est un gestionnaire de package pour Kubernetes
        # Helm permet de gerer déployer et versionner des applications Kubernetes en utilisant charts
      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.10
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
          cluster-name: ${{env.EKS_CLUSTER}}
          #config-files: .github/values/dev.yaml
          chart-path: helm/vprofilecharts
          namespace: default
          values: appimage=${{secrets.REGISTRY}}/${{env.ECR_REPOSITORY}},apptag=${{github.run_number}}
          name: vprofile-stack